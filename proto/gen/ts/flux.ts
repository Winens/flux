// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v3.19.6
// source: flux.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  ClientWritableStream,
  handleClientStreamingCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "flux";

export enum ImageType {
  WEBP = 0,
  PNG = 1,
  JPEG = 2,
  GIF = 4,
  AVIF = 5,
  UNRECOGNIZED = -1,
}

export function imageTypeFromJSON(object: any): ImageType {
  switch (object) {
    case 0:
    case "WEBP":
      return ImageType.WEBP;
    case 1:
    case "PNG":
      return ImageType.PNG;
    case 2:
    case "JPEG":
      return ImageType.JPEG;
    case 4:
    case "GIF":
      return ImageType.GIF;
    case 5:
    case "AVIF":
      return ImageType.AVIF;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ImageType.UNRECOGNIZED;
  }
}

export function imageTypeToJSON(object: ImageType): string {
  switch (object) {
    case ImageType.WEBP:
      return "WEBP";
    case ImageType.PNG:
      return "PNG";
    case ImageType.JPEG:
      return "JPEG";
    case ImageType.GIF:
      return "GIF";
    case ImageType.AVIF:
      return "AVIF";
    case ImageType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Reference: https://sharp.pixelplumbing.com/api-resize#resize */
export enum ObjectFit {
  CONTAIN = 0,
  COVER = 1,
  FILL = 2,
  INSIDE = 3,
  OUTSIDE = 4,
  UNRECOGNIZED = -1,
}

export function objectFitFromJSON(object: any): ObjectFit {
  switch (object) {
    case 0:
    case "CONTAIN":
      return ObjectFit.CONTAIN;
    case 1:
    case "COVER":
      return ObjectFit.COVER;
    case 2:
    case "FILL":
      return ObjectFit.FILL;
    case 3:
    case "INSIDE":
      return ObjectFit.INSIDE;
    case 4:
    case "OUTSIDE":
      return ObjectFit.OUTSIDE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ObjectFit.UNRECOGNIZED;
  }
}

export function objectFitToJSON(object: ObjectFit): string {
  switch (object) {
    case ObjectFit.CONTAIN:
      return "CONTAIN";
    case ObjectFit.COVER:
      return "COVER";
    case ObjectFit.FILL:
      return "FILL";
    case ObjectFit.INSIDE:
      return "INSIDE";
    case ObjectFit.OUTSIDE:
      return "OUTSIDE";
    case ObjectFit.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ResizeRequest {
  imageData: Uint8Array;
  options: ResizeOptions | undefined;
}

export interface ResizeResponse {
  imageData: Uint8Array;
}

export interface ResizeOptions {
  imageType: ImageType;
  width: number;
  height: number;
  objectFit?: ObjectFit | undefined;
  quality?:
    | number
    | undefined;
  /** hex color (default #000000) */
  backgroundColor?: string | undefined;
}

function createBaseResizeRequest(): ResizeRequest {
  return { imageData: new Uint8Array(0), options: undefined };
}

export const ResizeRequest = {
  encode(message: ResizeRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.imageData.length !== 0) {
      writer.uint32(10).bytes(message.imageData);
    }
    if (message.options !== undefined) {
      ResizeOptions.encode(message.options, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResizeRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResizeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.imageData = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.options = ResizeOptions.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResizeRequest {
    return {
      imageData: isSet(object.imageData) ? bytesFromBase64(object.imageData) : new Uint8Array(0),
      options: isSet(object.options) ? ResizeOptions.fromJSON(object.options) : undefined,
    };
  },

  toJSON(message: ResizeRequest): unknown {
    const obj: any = {};
    if (message.imageData.length !== 0) {
      obj.imageData = base64FromBytes(message.imageData);
    }
    if (message.options !== undefined) {
      obj.options = ResizeOptions.toJSON(message.options);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResizeRequest>, I>>(base?: I): ResizeRequest {
    return ResizeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResizeRequest>, I>>(object: I): ResizeRequest {
    const message = createBaseResizeRequest();
    message.imageData = object.imageData ?? new Uint8Array(0);
    message.options = (object.options !== undefined && object.options !== null)
      ? ResizeOptions.fromPartial(object.options)
      : undefined;
    return message;
  },
};

function createBaseResizeResponse(): ResizeResponse {
  return { imageData: new Uint8Array(0) };
}

export const ResizeResponse = {
  encode(message: ResizeResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.imageData.length !== 0) {
      writer.uint32(10).bytes(message.imageData);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResizeResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResizeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.imageData = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResizeResponse {
    return { imageData: isSet(object.imageData) ? bytesFromBase64(object.imageData) : new Uint8Array(0) };
  },

  toJSON(message: ResizeResponse): unknown {
    const obj: any = {};
    if (message.imageData.length !== 0) {
      obj.imageData = base64FromBytes(message.imageData);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResizeResponse>, I>>(base?: I): ResizeResponse {
    return ResizeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResizeResponse>, I>>(object: I): ResizeResponse {
    const message = createBaseResizeResponse();
    message.imageData = object.imageData ?? new Uint8Array(0);
    return message;
  },
};

function createBaseResizeOptions(): ResizeOptions {
  return { imageType: 0, width: 0, height: 0, objectFit: undefined, quality: undefined, backgroundColor: undefined };
}

export const ResizeOptions = {
  encode(message: ResizeOptions, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.imageType !== 0) {
      writer.uint32(8).int32(message.imageType);
    }
    if (message.width !== 0) {
      writer.uint32(16).int32(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(24).int32(message.height);
    }
    if (message.objectFit !== undefined) {
      writer.uint32(32).int32(message.objectFit);
    }
    if (message.quality !== undefined) {
      writer.uint32(40).int32(message.quality);
    }
    if (message.backgroundColor !== undefined) {
      writer.uint32(50).string(message.backgroundColor);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResizeOptions {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResizeOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.imageType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.width = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.height = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.objectFit = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.quality = reader.int32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.backgroundColor = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResizeOptions {
    return {
      imageType: isSet(object.imageType) ? imageTypeFromJSON(object.imageType) : 0,
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      objectFit: isSet(object.objectFit) ? objectFitFromJSON(object.objectFit) : undefined,
      quality: isSet(object.quality) ? globalThis.Number(object.quality) : undefined,
      backgroundColor: isSet(object.backgroundColor) ? globalThis.String(object.backgroundColor) : undefined,
    };
  },

  toJSON(message: ResizeOptions): unknown {
    const obj: any = {};
    if (message.imageType !== 0) {
      obj.imageType = imageTypeToJSON(message.imageType);
    }
    if (message.width !== 0) {
      obj.width = Math.round(message.width);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.objectFit !== undefined) {
      obj.objectFit = objectFitToJSON(message.objectFit);
    }
    if (message.quality !== undefined) {
      obj.quality = Math.round(message.quality);
    }
    if (message.backgroundColor !== undefined) {
      obj.backgroundColor = message.backgroundColor;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResizeOptions>, I>>(base?: I): ResizeOptions {
    return ResizeOptions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResizeOptions>, I>>(object: I): ResizeOptions {
    const message = createBaseResizeOptions();
    message.imageType = object.imageType ?? 0;
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    message.objectFit = object.objectFit ?? undefined;
    message.quality = object.quality ?? undefined;
    message.backgroundColor = object.backgroundColor ?? undefined;
    return message;
  },
};

export type FluxImageService = typeof FluxImageService;
export const FluxImageService = {
  resize: {
    path: "/flux.FluxImage/Resize",
    requestStream: true,
    responseStream: false,
    requestSerialize: (value: ResizeRequest) => Buffer.from(ResizeRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ResizeRequest.decode(value),
    responseSerialize: (value: ResizeResponse) => Buffer.from(ResizeResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ResizeResponse.decode(value),
  },
} as const;

export interface FluxImageServer extends UntypedServiceImplementation {
  resize: handleClientStreamingCall<ResizeRequest, ResizeResponse>;
}

export interface FluxImageClient extends Client {
  resize(callback: (error: ServiceError | null, response: ResizeResponse) => void): ClientWritableStream<ResizeRequest>;
  resize(
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ResizeResponse) => void,
  ): ClientWritableStream<ResizeRequest>;
  resize(
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ResizeResponse) => void,
  ): ClientWritableStream<ResizeRequest>;
  resize(
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ResizeResponse) => void,
  ): ClientWritableStream<ResizeRequest>;
}

export const FluxImageClient = makeGenericClientConstructor(FluxImageService, "flux.FluxImage") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): FluxImageClient;
  service: typeof FluxImageService;
  serviceName: string;
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
