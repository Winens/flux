// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: flux.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FluxImageClient is the client API for FluxImage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FluxImageClient interface {
	Resize(ctx context.Context, opts ...grpc.CallOption) (FluxImage_ResizeClient, error)
}

type fluxImageClient struct {
	cc grpc.ClientConnInterface
}

func NewFluxImageClient(cc grpc.ClientConnInterface) FluxImageClient {
	return &fluxImageClient{cc}
}

func (c *fluxImageClient) Resize(ctx context.Context, opts ...grpc.CallOption) (FluxImage_ResizeClient, error) {
	stream, err := c.cc.NewStream(ctx, &FluxImage_ServiceDesc.Streams[0], "/flux.FluxImage/Resize", opts...)
	if err != nil {
		return nil, err
	}
	x := &fluxImageResizeClient{stream}
	return x, nil
}

type FluxImage_ResizeClient interface {
	Send(*ResizeRequest) error
	CloseAndRecv() (*ResizeResponse, error)
	grpc.ClientStream
}

type fluxImageResizeClient struct {
	grpc.ClientStream
}

func (x *fluxImageResizeClient) Send(m *ResizeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fluxImageResizeClient) CloseAndRecv() (*ResizeResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ResizeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FluxImageServer is the server API for FluxImage service.
// All implementations must embed UnimplementedFluxImageServer
// for forward compatibility
type FluxImageServer interface {
	Resize(FluxImage_ResizeServer) error
	mustEmbedUnimplementedFluxImageServer()
}

// UnimplementedFluxImageServer must be embedded to have forward compatible implementations.
type UnimplementedFluxImageServer struct {
}

func (UnimplementedFluxImageServer) Resize(FluxImage_ResizeServer) error {
	return status.Errorf(codes.Unimplemented, "method Resize not implemented")
}
func (UnimplementedFluxImageServer) mustEmbedUnimplementedFluxImageServer() {}

// UnsafeFluxImageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FluxImageServer will
// result in compilation errors.
type UnsafeFluxImageServer interface {
	mustEmbedUnimplementedFluxImageServer()
}

func RegisterFluxImageServer(s grpc.ServiceRegistrar, srv FluxImageServer) {
	s.RegisterService(&FluxImage_ServiceDesc, srv)
}

func _FluxImage_Resize_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FluxImageServer).Resize(&fluxImageResizeServer{stream})
}

type FluxImage_ResizeServer interface {
	SendAndClose(*ResizeResponse) error
	Recv() (*ResizeRequest, error)
	grpc.ServerStream
}

type fluxImageResizeServer struct {
	grpc.ServerStream
}

func (x *fluxImageResizeServer) SendAndClose(m *ResizeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fluxImageResizeServer) Recv() (*ResizeRequest, error) {
	m := new(ResizeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FluxImage_ServiceDesc is the grpc.ServiceDesc for FluxImage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FluxImage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flux.FluxImage",
	HandlerType: (*FluxImageServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Resize",
			Handler:       _FluxImage_Resize_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "flux.proto",
}
