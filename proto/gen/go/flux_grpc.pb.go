// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: flux.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FluxImageClient is the client API for FluxImage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FluxImageClient interface {
	Resize(ctx context.Context, in *ResizeRequest, opts ...grpc.CallOption) (*ResizeResponse, error)
}

type fluxImageClient struct {
	cc grpc.ClientConnInterface
}

func NewFluxImageClient(cc grpc.ClientConnInterface) FluxImageClient {
	return &fluxImageClient{cc}
}

func (c *fluxImageClient) Resize(ctx context.Context, in *ResizeRequest, opts ...grpc.CallOption) (*ResizeResponse, error) {
	out := new(ResizeResponse)
	err := c.cc.Invoke(ctx, "/flux.FluxImage/Resize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FluxImageServer is the server API for FluxImage service.
// All implementations must embed UnimplementedFluxImageServer
// for forward compatibility
type FluxImageServer interface {
	Resize(context.Context, *ResizeRequest) (*ResizeResponse, error)
	mustEmbedUnimplementedFluxImageServer()
}

// UnimplementedFluxImageServer must be embedded to have forward compatible implementations.
type UnimplementedFluxImageServer struct {
}

func (UnimplementedFluxImageServer) Resize(context.Context, *ResizeRequest) (*ResizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resize not implemented")
}
func (UnimplementedFluxImageServer) mustEmbedUnimplementedFluxImageServer() {}

// UnsafeFluxImageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FluxImageServer will
// result in compilation errors.
type UnsafeFluxImageServer interface {
	mustEmbedUnimplementedFluxImageServer()
}

func RegisterFluxImageServer(s grpc.ServiceRegistrar, srv FluxImageServer) {
	s.RegisterService(&FluxImage_ServiceDesc, srv)
}

func _FluxImage_Resize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FluxImageServer).Resize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flux.FluxImage/Resize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FluxImageServer).Resize(ctx, req.(*ResizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FluxImage_ServiceDesc is the grpc.ServiceDesc for FluxImage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FluxImage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flux.FluxImage",
	HandlerType: (*FluxImageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Resize",
			Handler:    _FluxImage_Resize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flux.proto",
}
